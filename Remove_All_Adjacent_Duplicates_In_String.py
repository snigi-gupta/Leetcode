# https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/
import string

class Solution:

    """
    This method will not work for large inputs. This method will result in TLE
    """
    def removeDuplicates(self, s, ptr1=0, ptr2=1):
        if s is "":
            return ""
        if len(s) > 1 and s[ptr1] == s[ptr2]:
            new_string = s[:ptr1] + s[ptr2+1:]
            result = self.removeDuplicates(new_string)
        else:
            if len(s) < 2 or ptr2 == len(s)-1:
                return s
            else:
                ptr1 += 1
                ptr2 += 1
                result = self.removeDuplicates(s, ptr1, ptr2)

        return result

    def removeDuplicatesHashMap(self, s):
        hashMap = {2*ch for ch in string.ascii_lowercase}
        prev_length = -1
        while prev_length != len(s):
            prev_length = len(s)
            for duplicate in hashMap:
                s = s.replace(duplicate, '')
        return s

    def removeDuplicateStack(self, s):
        stack = []
        for letter in s:
            if stack and (letter == stack[-1]):
                stack.pop()
            else:
                stack.append(letter)
        return ''.join(stack)


if __name__ == "__main__":
    obj = Solution()
    print(obj.removeDuplicatesHashMap(s="abbaca"))
    print(obj.removeDuplicatesHashMap(s="abbceddee"))
    print(obj.removeDuplicatesHashMap(s="aaaaaaaaa"))
    print(obj.removeDuplicatesHashMap(s="cjpgjsomosejmrphpsirmhrhestdcigpbpfkhrgptjelkjrqqogcoabkntfdodoegtgbeidsonksnaegofrqndhlepfnjnjbfoqmhbecjsmnjqijplarpjetttcdmaeeottljcgskjigtcocalctttdqtslpjdglqqnndqicjsehblbqicqdjlfqpbfgoslrtjjakacttignfjklqpofjdjoeqficrmljhdkjrbqeimecceamgemljapkcbejeqhqgkeqoajenmdeehstjlbqpqcjtgallepbnajtbegcitpprebcbaqoimpiiigqkhppeltkeempqfamtcnbjgrhpkgtbpdfrnrtaambbeohocsfaohtleqoosemrdliallfnifjdnqjbjbekdcnhgediairamjdhaaegrgejchsoaaetootohslmfoodnkjonefiigqjicnjkqjbniqdjcqmacrcagcfbiqsjlagcjtjordchcflkaelkniehboibdamtpmeiqqospkbnpgktirjgopoetsmqjoiqtflheermfpgjmchmfjgbkapnhqhotjqplrhgmkcjraihdksrelgshfetcostililosmcqternhjkcoaortjbpcnselcnegfcfhfsncleghmkmjblacdtrnqkrpbrpgsoemqhbeiktajigqqqmselcqetqomjoqmmdnapgrtdcgqlccofsnmgatdjdaaaamgeckgrmihpjsbidrcfooptfprqeklpfkrkqpepnpjsjkabrkjkqnnojethaohbnnrgsrhfplmtjqnjnikoeggqogrikkolrsbaethdktrqhlaogfcprfomkqcjqngemekesmqsifipbtneqsapipfpmpslepbqsjlkedknprpraiahatrhrodejtlldjneekarnjjngnfkidnamdrhqinhdpshjrqpncsdolcnfhatngipkskteenniebqjnecntrgtchsrdmgsdbocotttsifebmorpqmfcmqemjlnhcpbbiacjctpctmftkntjmrpkmpitranbcmaqssqapgabinrcaeigpcjiqeqkncbfhalibgdseginqnlccjhstshijdafsagnfhaboqmigfneeddkodocdnhgdiiiftpdrijpoojslffrspkgdfhqlqdnbtqimkqddjpphdmphejqaotmhndodpkjptlpnfctsmkekabrfpifelgckjsplfbaggkhgrebtkksqdsnskbqismrfghpssoqfprlrbkfrtsrdqfoffpkcqeiamqckdlbjnitrsjqrtqjbnrsladreqcaopdqkpijocotrhlgosokqnljtljlrdsbttrkkgtshqeihqstfmqrsrjrcknteqnsqijkprsinaoescbkrnabrdrmlbgblarijkfcptqftsqrfafetnerpttshdngbcjlratfdfnhroogolfqhpopdibnggsqssgcfeaphcksfqtdikniqfipmcbhdqfnkbokeiqepssemmaaprjbkrktqosessnpisitdcpbpsflbsjjpjggcboacpanaeqmkbaibimqicahbbkpqnljelclsfmkbgmdlhpotlahqmogtpoargqhdqtpdnrpmicatqanqtlrmkprjklkehcllafidklpnsbqchpajejcjeppdhlaibassdmcjbtdkipraemmbofgbnpskhgkjdoqffhjbjlhescbrlafnjrbfbspnmkelnijgohkptognttpjfosjnlqcficjdjpdmtqrfillcjbfjsliggaqnigkajsginnthcrnmsgfgkdtcsbsbjdktpohtgmddimmgnslnmsnqtsqqjjdgssejostaklamslggqntgmldhphafbeafjccrpfaojaccncrsqdhnijlihrfsdellgstntijpqdjhdrbhqtslbifrrcspsprikpicknrpsaabnnlmrkkigbbneljmqqchabaipocctciodercbmpmjdhcipsfddhqmmehdgtrigiqfqqecmklefiighooeegalttlpitatdnqkhfctdhrafktjtbohmekalsqmcqrskschhcfjrfsrgkmjtcdmrcollmrjqntnhmkamimgjancrapccfpcjoriaoqnqolgjomniaaeinirablfammopsomsldleophbfakmqqpbqnandantiimhmokqimqgpdhlnckbkenoigedmsontmanoikinfmmmghdfsscqfmjgbenkcrljifrgbipbdobrabenhotacpcrpcgcefenarqcenaiomnkflskpgiratckmepndgrmqkarberpsaflcrlmijrgksbmilrntmcnmbtsrgpcpppapbrotaofmchehpnqreoberedlrfejajbhjmqetabpphfbdjrarkmdepdllqrarrskqkapsfrkdsebrhlqtgftijjclihiqjljsbpmfltgqpbbdkeshrackmlaoitmoibdinlhtnokbqteoskbpaocjkihhfqsdpsibmeajdgsdoorkaloghgrtbanclhitalfjmrhlkttaatjokginrfqsphopfldnnqfjbtejaiakikqhodiklttttfjlqntgqsfimnsstpojlopjlcadehkgnkkjameotdmobilmctmhetembottcsjtgbgbmkcnbqtlqenfjipcmtimqfchlpqjqmqtbdbskgfqmibkqocjdlciesarpttgntnioibhtpcismtgpnbengmnbboelrriqqqhnqockjphkntlgrrmjnndqkgidgihjmjqimmlbgpbtlnlohjmhlesmflklfcrqhbepmceticlcfrhsjrqnbpgqosjkdfqbfpcddnmqjjakllgjmgjjcakpfgfrhpffcagakkoitqiaglsfatjiirlsgaddcjekolioehllqjmagqfgbjojhinkbhjrlpfgoqnmfjofstlkkqesilmrekqqoprhdjmeeaqddardadrjtrtopobmctlkorpjcdaqjljopekajldjeqkttnpfkhtghabkpjkosdbkmrkalcdecoqmbirrmcmtsbntoospfogplhntjbtiqjcjpamqppcfdpcdqqdrhehbljprkhdslsmsomhndarepsndbjlsnantsnhkabrjgrgdhjobohmjmlmdidarjsgoisdpgohgscmnqgfeboqkhfbckqhsjtjrkdfkmoefdmnottjfgljnfrejgnhrlcgfhrfroonjqbkegjmnnihbqoteagogbdfkmebhmsehratsdtfpjtfsgiegktkcflttrnlicidphaqejorntreajegmniaprbtbnsrnagsicsmghboqkkeidjkoqfatisbmeeiasalqbhqrdeltlkrqciktfcsbbfkmtgttebmmefjheeiisqtgaeimaonjclrmssfrkfekqbicrmserkbfpbmncdkqstkiedfoqmhgjtafintdldarneancdjaffkssmeckqsmolpiicsikgagbfkbfmotccdqdlorbcehejgdjpaqgrjmkgfnlabptjpcqkotlebmoqnghrtgeokiknjmhqbspdgcqgcbrjsdjsakfhcpmkbrmctlnidhstgcimaopgktefhbjcntbjmkqescsedoirfcdofbconjmdfbsnmjihmbslomkefmbcktgbfmqjhrbctrafilaamrbiioeiitjbsnnjplomngjafjpfmgbeclhktprafbqsmedfqibpsjdpgrpnfbnhqrtjlnelingkilmdbetqonnamomgjkbiprjkacohjdpfclnglaocfattnsltosqbdnrftgkomhdgsisfjlqkmtsqchsalqpnlhhaksbrqjobrrsgrftconsshiccbfnpesdsaokrsgnlsprhjcfrhqcdtrlmpjaahcfqggoqoiclormbtkmqirdgtkbdflaijericrfhirgjabtedglcelmcdprgtiolroefharklifcqqrmdijilegfdrnskenkfkaabcrfmnmfgjtrfoirgnmjdtogjcckthoenqpptifhkselotdrtrplcmjsetjgbbcccohseoftfebkgdbjqoctgcqllhbfpqnfqdsjprffssjoncqirrknjrqmdrsttmrnheaptlhgsjbosjhdijgfphsshkgppcdlijeonlbnpfaqlgknddhlkbeihkcheeeokcdmjrrtdclkohjcrliliaakqiebkmgpjomspbnpjlcrldqppqgiopennbicnforcnamttdkonmgqotdtpfairoqoibgnlbmmnooimrhfhbdhektlqmbgnnedhqnfkfrtepehcjkcgsnbrjslgtjdimifaqdgtqalcgcqlbafodesneafcpcftbqptgieaqhbrqakkmmlopmsrpctmanghdjrroaktpqehmbllostddmrecmapnooobgmkptslqhqeptntsdnrocosjmmqhjlsnelcrqseohocrmnmstrpemstqaapfspsogkmrbdohiqhnspebmqcpmjdhappifesiqbngeqbchrhhpgjlnrceissglfbdkdtklnqntdcgtgmmearadrksklrsftnheplkljgcicljijpmfptlmohdekdflasdfdihcndqqkgsdndkkapodojtpeqeembmdgrjogpadpkbpogopokifqllhniiqlcbajrqlornbbpgnebgmdcjbbskemppasqdkqteelrpchfrqmmpbjffepkrconkhaesgkqfjfressnbfbcpfnoifekmilpkcfnnifnploljmkjmlhqkctntmatoedpriramidlcjemfgppbcprtksgegfalecdncrfegfflthlfsacepqthcinqonhaspcmtqifklcakjfmghkfjcpclhttnhffileatcqklemscegeiopfekaodegnkmbrdcrqtqkatcdjjpjnrkcsnkqghoegssfbhacdcfrcbtnnfohebkrreqmmhpqdlpkinnnpbrcaqlhhckmiqeggiqlqtrcoitpgdmmppfbefacnhchsgomnficlsnsekqcrjkskapchejbeqsjcprkklcnfgtnodqihrltcrjaeojarocgphbtglnergonshgmqkptkjphjnbhsahrobrmhfgkdjimgnkqbdjlsfhjskesrdiholpgsddpbidnqjjfnscrcalimqikqoketljoqekfqimqomscnbchrkkncnhbbblholahtfhckdpbofjmaobibibtfqsfsrnjtjpnbeedpstqoedlldtajjkpjijbjnlcfciaanhlkrnsagdtkfttjsdjnhenessbbonqjtthmignckbhmmcfjsimnphjndilordjjgbtalthdjfpreahfbdrcnbgpmthnlsqdclsdghdkciflnbpnikeakhsnkdkcqsaofdfnmqbnobtloqlrgmacqrlnmkmapoeimbmrdintembpbdgcincfmkmgdkjtsdstntspbfilejndfmignggagmfisseqtjsnplmmadedtnrcniboogtijngtrogseeonpaktkidgetrfkcokbnoahgdkrtggplthigdjeoimipdtrijknihjdcrpsijejqcgsgikkshfggfjaaettkrkehkbcflhhjcectmjmeersdlcahkpclbealemldeehktaqjndceeerkptrqldplkcrhcmbrhksfbkojblinjcothmlrtqetcfilibddfklaqskcagjjjtotdmcicaqclnrpkdjjnpejiqeepltkhtmfmlrkrfierfrsfcimabigkihtcsrqhgansogdpfpjjrondsdtogkhfohqrbobnqternmhtgoopkaasigssiqkrgbjhghpjjijmlsnhgikpmrlnoonnpmfsaajrrrlmfqeiefcglffioarmrpbdamriajjodkbebobjrskblkqleqetfhfhkkslcdtlptfthcbcodboeokdihkggicggpaegckaoqsqejtmsfltnntjppegfosaltkjqtcbabklbshggalsbaartojseipaccbiafabifdmicojjmofkhdgaotfmcmdpanatbdbkocekiljmealtnskgembgrobracbdctmhhgrmqocgsrjiofotmjfaidfneeariehdpfrqhhdanenmcgjgocgaajmcoolcahorlrtmfpikacenodnbcksqeqcainainlajqhhsmrldmphoolhqqohgakkfefbeaqkbaobaorclgdfprlcmdlimnrbktomhapekqqfidmclqccmdbtentemgepbkpihnpflitaegikshdorjdgfeksaqitklskoqesnqaakhtdnptrkcbshgchgcesnljicagdledtqhfjaqkmlsrafffqrqadqkeinssptlqijjqtscmsmgnqakmkileaglbmjjpdbdcdmnccarmsfbqjdjphroqgneosefbpgdkipqosraqssmcaggrjtcjebqqbbtjsfkqibkrkkrojdgqjtnedscgaholjdknbhnqngfodossabdnpdosrocqldittilqeijgjkeffkjgbkmjdrjmikhraqaerdjhcterdmekpnqajlnbrorfsqjpfkhrfajiqalopkdsgeioreeieridfpckpkjpbocggakfnlrmgcjkacpgjmmqtleqnmcsdhebtpnnkhemgateclkhppsjoelprtgnpgeraaaqassodrokhmmmddlkggcsqabgptfliekirqtdfogkqcjindndrbbbrchpashkncncqnkcdddnttspjijpibnnrotfldtobptcbbdlgpedcjknsoldicnbqtdatsbiqocienlpcghaqsrdreldpnfnrgclhthpleatndsjsnktjaeifkndtiogfstefsdhgagqjicjpikjfbtqqoaktmqgemdfftbfnhrpkaftacigqtjmlfokqffhfhsprkqtdiheslhmoeggofstrfnbqdhjnqabodatfifgmkkdrrrbmkcbegteihkcqtrnncorchgcqlfijobonecpbhccrljejprbjebtpqmaotjqfkkofssdpftjgqqljaqsolgpidsqllqrgctjilalddsllpenmdgiaiieqflsffsklfcdsfdtjshrekqebapktldhqofbopcebigphpabjcslfhbhfokkqbesirsojpajecogmfnhcrlelqccerfcjeoeeharsgfipqiqplgaigkoqdpsbdgdencgtlborreneconcjfjrldlccnfrfoiarhjbgsekdriitjjalbqhanqqddsacnpfkfcqppngtfckhflnrpdlccakekkbthghkrmkpehtlagqtsegtfkifinetbpblqsddsqdfbltrimthqabbdldmijppemdtehplnafoninpdrccthqlqeepcjbpqfnkhenrrogbkirqnmoahioraeomhjebepmobdqepccdlbhejnlktmctatkmrilebehljgiofcpedmeshbeafddbpcineqkmspicrobrcehphjoiegkfhjgtreddohrierelhdpthtgiallfpdnodgmgpjqfssagbqkrjetdcpcqidsjrnashjkeikgqenerqpaingljhrbligdmfnecidksbstahphfoghnmjfirepamroshejooecibrjpnnlknboqgrqgqmntqpmhanoafijhbdaaattifbpaloecfchjqdldtjihndlrenjrfnppjfhshlgiprrgdabkrpkfoericsekmllpfobjfjqatronhlninlcsqeboesbejaimokokhimgdgdtcalfpbctcpbeffdpanespdkiaaikondtoctnagcignmprqtobcjriaampnoikaeofcbipipmkbkgnsqnmhcogkfnkcbepcdeibccbcnheqpmftebfmphfajidingbetdhbqifjehccpptaqclqirdsmitptgnmsctcjqdtpbfdprbihpaqbmdibkolrqhjnhbgqtmdtdjkjipdlbcedrchakqtrjfppcatjflrtbknlpag"))
    print(obj.removeDuplicateStack(s="abbaca"))